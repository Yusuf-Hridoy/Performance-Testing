/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 61.0, "minX": 0.0, "maxY": 53076.0, "series": [{"data": [[0.0, 93.0], [0.1, 93.0], [0.2, 93.0], [0.3, 93.0], [0.4, 93.0], [0.5, 93.0], [0.6, 93.0], [0.7, 93.0], [0.8, 93.0], [0.9, 93.0], [1.0, 402.0], [1.1, 402.0], [1.2, 402.0], [1.3, 402.0], [1.4, 402.0], [1.5, 402.0], [1.6, 402.0], [1.7, 402.0], [1.8, 402.0], [1.9, 402.0], [2.0, 414.0], [2.1, 414.0], [2.2, 414.0], [2.3, 414.0], [2.4, 414.0], [2.5, 414.0], [2.6, 414.0], [2.7, 414.0], [2.8, 414.0], [2.9, 414.0], [3.0, 483.0], [3.1, 483.0], [3.2, 483.0], [3.3, 483.0], [3.4, 483.0], [3.5, 483.0], [3.6, 483.0], [3.7, 483.0], [3.8, 483.0], [3.9, 483.0], [4.0, 551.0], [4.1, 551.0], [4.2, 551.0], [4.3, 551.0], [4.4, 551.0], [4.5, 551.0], [4.6, 551.0], [4.7, 551.0], [4.8, 551.0], [4.9, 551.0], [5.0, 554.0], [5.1, 554.0], [5.2, 554.0], [5.3, 554.0], [5.4, 554.0], [5.5, 554.0], [5.6, 554.0], [5.7, 554.0], [5.8, 554.0], [5.9, 554.0], [6.0, 587.0], [6.1, 587.0], [6.2, 587.0], [6.3, 587.0], [6.4, 587.0], [6.5, 587.0], [6.6, 587.0], [6.7, 587.0], [6.8, 587.0], [6.9, 587.0], [7.0, 640.0], [7.1, 640.0], [7.2, 640.0], [7.3, 640.0], [7.4, 640.0], [7.5, 640.0], [7.6, 640.0], [7.7, 640.0], [7.8, 640.0], [7.9, 640.0], [8.0, 663.0], [8.1, 663.0], [8.2, 663.0], [8.3, 663.0], [8.4, 663.0], [8.5, 663.0], [8.6, 663.0], [8.7, 663.0], [8.8, 663.0], [8.9, 663.0], [9.0, 689.0], [9.1, 689.0], [9.2, 689.0], [9.3, 689.0], [9.4, 689.0], [9.5, 689.0], [9.6, 689.0], [9.7, 689.0], [9.8, 689.0], [9.9, 689.0], [10.0, 729.0], [10.1, 729.0], [10.2, 729.0], [10.3, 729.0], [10.4, 729.0], [10.5, 729.0], [10.6, 729.0], [10.7, 729.0], [10.8, 729.0], [10.9, 729.0], [11.0, 741.0], [11.1, 741.0], [11.2, 741.0], [11.3, 741.0], [11.4, 741.0], [11.5, 741.0], [11.6, 741.0], [11.7, 741.0], [11.8, 741.0], [11.9, 741.0], [12.0, 747.0], [12.1, 747.0], [12.2, 747.0], [12.3, 747.0], [12.4, 747.0], [12.5, 747.0], [12.6, 747.0], [12.7, 747.0], [12.8, 747.0], [12.9, 747.0], [13.0, 751.0], [13.1, 751.0], [13.2, 751.0], [13.3, 751.0], [13.4, 751.0], [13.5, 751.0], [13.6, 751.0], [13.7, 751.0], [13.8, 751.0], [13.9, 751.0], [14.0, 754.0], [14.1, 754.0], [14.2, 754.0], [14.3, 754.0], [14.4, 754.0], [14.5, 754.0], [14.6, 754.0], [14.7, 754.0], [14.8, 754.0], [14.9, 754.0], [15.0, 760.0], [15.1, 760.0], [15.2, 760.0], [15.3, 760.0], [15.4, 760.0], [15.5, 760.0], [15.6, 760.0], [15.7, 760.0], [15.8, 760.0], [15.9, 760.0], [16.0, 761.0], [16.1, 761.0], [16.2, 761.0], [16.3, 761.0], [16.4, 761.0], [16.5, 761.0], [16.6, 761.0], [16.7, 761.0], [16.8, 761.0], [16.9, 761.0], [17.0, 769.0], [17.1, 769.0], [17.2, 769.0], [17.3, 769.0], [17.4, 769.0], [17.5, 769.0], [17.6, 769.0], [17.7, 769.0], [17.8, 769.0], [17.9, 769.0], [18.0, 770.0], [18.1, 770.0], [18.2, 770.0], [18.3, 770.0], [18.4, 770.0], [18.5, 770.0], [18.6, 770.0], [18.7, 770.0], [18.8, 770.0], [18.9, 770.0], [19.0, 786.0], [19.1, 786.0], [19.2, 786.0], [19.3, 786.0], [19.4, 786.0], [19.5, 786.0], [19.6, 786.0], [19.7, 786.0], [19.8, 786.0], [19.9, 786.0], [20.0, 810.0], [20.1, 810.0], [20.2, 810.0], [20.3, 810.0], [20.4, 810.0], [20.5, 810.0], [20.6, 810.0], [20.7, 810.0], [20.8, 810.0], [20.9, 810.0], [21.0, 818.0], [21.1, 818.0], [21.2, 818.0], [21.3, 818.0], [21.4, 818.0], [21.5, 818.0], [21.6, 818.0], [21.7, 818.0], [21.8, 818.0], [21.9, 818.0], [22.0, 823.0], [22.1, 823.0], [22.2, 823.0], [22.3, 823.0], [22.4, 823.0], [22.5, 823.0], [22.6, 823.0], [22.7, 823.0], [22.8, 823.0], [22.9, 823.0], [23.0, 833.0], [23.1, 833.0], [23.2, 833.0], [23.3, 833.0], [23.4, 833.0], [23.5, 833.0], [23.6, 833.0], [23.7, 833.0], [23.8, 833.0], [23.9, 833.0], [24.0, 838.0], [24.1, 838.0], [24.2, 838.0], [24.3, 838.0], [24.4, 838.0], [24.5, 838.0], [24.6, 838.0], [24.7, 838.0], [24.8, 838.0], [24.9, 838.0], [25.0, 853.0], [25.1, 853.0], [25.2, 853.0], [25.3, 853.0], [25.4, 853.0], [25.5, 853.0], [25.6, 853.0], [25.7, 853.0], [25.8, 853.0], [25.9, 853.0], [26.0, 878.0], [26.1, 878.0], [26.2, 878.0], [26.3, 878.0], [26.4, 878.0], [26.5, 878.0], [26.6, 878.0], [26.7, 878.0], [26.8, 878.0], [26.9, 878.0], [27.0, 879.0], [27.1, 879.0], [27.2, 879.0], [27.3, 879.0], [27.4, 879.0], [27.5, 879.0], [27.6, 879.0], [27.7, 879.0], [27.8, 879.0], [27.9, 879.0], [28.0, 895.0], [28.1, 895.0], [28.2, 895.0], [28.3, 895.0], [28.4, 895.0], [28.5, 895.0], [28.6, 895.0], [28.7, 895.0], [28.8, 895.0], [28.9, 895.0], [29.0, 901.0], [29.1, 901.0], [29.2, 901.0], [29.3, 901.0], [29.4, 901.0], [29.5, 901.0], [29.6, 901.0], [29.7, 901.0], [29.8, 901.0], [29.9, 901.0], [30.0, 902.0], [30.1, 902.0], [30.2, 902.0], [30.3, 902.0], [30.4, 902.0], [30.5, 902.0], [30.6, 902.0], [30.7, 902.0], [30.8, 902.0], [30.9, 902.0], [31.0, 918.0], [31.1, 918.0], [31.2, 918.0], [31.3, 918.0], [31.4, 918.0], [31.5, 918.0], [31.6, 918.0], [31.7, 918.0], [31.8, 918.0], [31.9, 918.0], [32.0, 951.0], [32.1, 951.0], [32.2, 951.0], [32.3, 951.0], [32.4, 951.0], [32.5, 951.0], [32.6, 951.0], [32.7, 951.0], [32.8, 951.0], [32.9, 951.0], [33.0, 953.0], [33.1, 953.0], [33.2, 953.0], [33.3, 953.0], [33.4, 953.0], [33.5, 953.0], [33.6, 953.0], [33.7, 953.0], [33.8, 953.0], [33.9, 953.0], [34.0, 957.0], [34.1, 957.0], [34.2, 957.0], [34.3, 957.0], [34.4, 957.0], [34.5, 957.0], [34.6, 957.0], [34.7, 957.0], [34.8, 957.0], [34.9, 957.0], [35.0, 961.0], [35.1, 961.0], [35.2, 961.0], [35.3, 961.0], [35.4, 961.0], [35.5, 961.0], [35.6, 961.0], [35.7, 961.0], [35.8, 961.0], [35.9, 961.0], [36.0, 985.0], [36.1, 985.0], [36.2, 985.0], [36.3, 985.0], [36.4, 985.0], [36.5, 985.0], [36.6, 985.0], [36.7, 985.0], [36.8, 985.0], [36.9, 985.0], [37.0, 986.0], [37.1, 986.0], [37.2, 986.0], [37.3, 986.0], [37.4, 986.0], [37.5, 986.0], [37.6, 986.0], [37.7, 986.0], [37.8, 986.0], [37.9, 986.0], [38.0, 992.0], [38.1, 992.0], [38.2, 992.0], [38.3, 992.0], [38.4, 992.0], [38.5, 992.0], [38.6, 992.0], [38.7, 992.0], [38.8, 992.0], [38.9, 992.0], [39.0, 999.0], [39.1, 999.0], [39.2, 999.0], [39.3, 999.0], [39.4, 999.0], [39.5, 999.0], [39.6, 999.0], [39.7, 999.0], [39.8, 999.0], [39.9, 999.0], [40.0, 1016.0], [40.1, 1016.0], [40.2, 1016.0], [40.3, 1016.0], [40.4, 1016.0], [40.5, 1016.0], [40.6, 1016.0], [40.7, 1016.0], [40.8, 1016.0], [40.9, 1016.0], [41.0, 1018.0], [41.1, 1018.0], [41.2, 1018.0], [41.3, 1018.0], [41.4, 1018.0], [41.5, 1018.0], [41.6, 1018.0], [41.7, 1018.0], [41.8, 1018.0], [41.9, 1018.0], [42.0, 1055.0], [42.1, 1055.0], [42.2, 1055.0], [42.3, 1055.0], [42.4, 1055.0], [42.5, 1055.0], [42.6, 1055.0], [42.7, 1055.0], [42.8, 1055.0], [42.9, 1055.0], [43.0, 1063.0], [43.1, 1063.0], [43.2, 1063.0], [43.3, 1063.0], [43.4, 1063.0], [43.5, 1063.0], [43.6, 1063.0], [43.7, 1063.0], [43.8, 1063.0], [43.9, 1063.0], [44.0, 1075.0], [44.1, 1075.0], [44.2, 1075.0], [44.3, 1075.0], [44.4, 1075.0], [44.5, 1075.0], [44.6, 1075.0], [44.7, 1075.0], [44.8, 1075.0], [44.9, 1075.0], [45.0, 1092.0], [45.1, 1092.0], [45.2, 1092.0], [45.3, 1092.0], [45.4, 1092.0], [45.5, 1092.0], [45.6, 1092.0], [45.7, 1092.0], [45.8, 1092.0], [45.9, 1092.0], [46.0, 1097.0], [46.1, 1097.0], [46.2, 1097.0], [46.3, 1097.0], [46.4, 1097.0], [46.5, 1097.0], [46.6, 1097.0], [46.7, 1097.0], [46.8, 1097.0], [46.9, 1097.0], [47.0, 1097.0], [47.1, 1097.0], [47.2, 1097.0], [47.3, 1097.0], [47.4, 1097.0], [47.5, 1097.0], [47.6, 1097.0], [47.7, 1097.0], [47.8, 1097.0], [47.9, 1097.0], [48.0, 1139.0], [48.1, 1139.0], [48.2, 1139.0], [48.3, 1139.0], [48.4, 1139.0], [48.5, 1139.0], [48.6, 1139.0], [48.7, 1139.0], [48.8, 1139.0], [48.9, 1139.0], [49.0, 1147.0], [49.1, 1147.0], [49.2, 1147.0], [49.3, 1147.0], [49.4, 1147.0], [49.5, 1147.0], [49.6, 1147.0], [49.7, 1147.0], [49.8, 1147.0], [49.9, 1147.0], [50.0, 1201.0], [50.1, 1201.0], [50.2, 1201.0], [50.3, 1201.0], [50.4, 1201.0], [50.5, 1201.0], [50.6, 1201.0], [50.7, 1201.0], [50.8, 1201.0], [50.9, 1201.0], [51.0, 1245.0], [51.1, 1245.0], [51.2, 1245.0], [51.3, 1245.0], [51.4, 1245.0], [51.5, 1245.0], [51.6, 1245.0], [51.7, 1245.0], [51.8, 1245.0], [51.9, 1245.0], [52.0, 1259.0], [52.1, 1259.0], [52.2, 1259.0], [52.3, 1259.0], [52.4, 1259.0], [52.5, 1259.0], [52.6, 1259.0], [52.7, 1259.0], [52.8, 1259.0], [52.9, 1259.0], [53.0, 1259.0], [53.1, 1259.0], [53.2, 1259.0], [53.3, 1259.0], [53.4, 1259.0], [53.5, 1259.0], [53.6, 1259.0], [53.7, 1259.0], [53.8, 1259.0], [53.9, 1259.0], [54.0, 1286.0], [54.1, 1286.0], [54.2, 1286.0], [54.3, 1286.0], [54.4, 1286.0], [54.5, 1286.0], [54.6, 1286.0], [54.7, 1286.0], [54.8, 1286.0], [54.9, 1286.0], [55.0, 1335.0], [55.1, 1335.0], [55.2, 1335.0], [55.3, 1335.0], [55.4, 1335.0], [55.5, 1335.0], [55.6, 1335.0], [55.7, 1335.0], [55.8, 1335.0], [55.9, 1335.0], [56.0, 1388.0], [56.1, 1388.0], [56.2, 1388.0], [56.3, 1388.0], [56.4, 1388.0], [56.5, 1388.0], [56.6, 1388.0], [56.7, 1388.0], [56.8, 1388.0], [56.9, 1388.0], [57.0, 1399.0], [57.1, 1399.0], [57.2, 1399.0], [57.3, 1399.0], [57.4, 1399.0], [57.5, 1399.0], [57.6, 1399.0], [57.7, 1399.0], [57.8, 1399.0], [57.9, 1399.0], [58.0, 1405.0], [58.1, 1405.0], [58.2, 1405.0], [58.3, 1405.0], [58.4, 1405.0], [58.5, 1405.0], [58.6, 1405.0], [58.7, 1405.0], [58.8, 1405.0], [58.9, 1405.0], [59.0, 1415.0], [59.1, 1415.0], [59.2, 1415.0], [59.3, 1415.0], [59.4, 1415.0], [59.5, 1415.0], [59.6, 1415.0], [59.7, 1415.0], [59.8, 1415.0], [59.9, 1415.0], [60.0, 1428.0], [60.1, 1428.0], [60.2, 1428.0], [60.3, 1428.0], [60.4, 1428.0], [60.5, 1428.0], [60.6, 1428.0], [60.7, 1428.0], [60.8, 1428.0], [60.9, 1428.0], [61.0, 1429.0], [61.1, 1429.0], [61.2, 1429.0], [61.3, 1429.0], [61.4, 1429.0], [61.5, 1429.0], [61.6, 1429.0], [61.7, 1429.0], [61.8, 1429.0], [61.9, 1429.0], [62.0, 1447.0], [62.1, 1447.0], [62.2, 1447.0], [62.3, 1447.0], [62.4, 1447.0], [62.5, 1447.0], [62.6, 1447.0], [62.7, 1447.0], [62.8, 1447.0], [62.9, 1447.0], [63.0, 1503.0], [63.1, 1503.0], [63.2, 1503.0], [63.3, 1503.0], [63.4, 1503.0], [63.5, 1503.0], [63.6, 1503.0], [63.7, 1503.0], [63.8, 1503.0], [63.9, 1503.0], [64.0, 1503.0], [64.1, 1503.0], [64.2, 1503.0], [64.3, 1503.0], [64.4, 1503.0], [64.5, 1503.0], [64.6, 1503.0], [64.7, 1503.0], [64.8, 1503.0], [64.9, 1503.0], [65.0, 1526.0], [65.1, 1526.0], [65.2, 1526.0], [65.3, 1526.0], [65.4, 1526.0], [65.5, 1526.0], [65.6, 1526.0], [65.7, 1526.0], [65.8, 1526.0], [65.9, 1526.0], [66.0, 1531.0], [66.1, 1531.0], [66.2, 1531.0], [66.3, 1531.0], [66.4, 1531.0], [66.5, 1531.0], [66.6, 1531.0], [66.7, 1531.0], [66.8, 1531.0], [66.9, 1531.0], [67.0, 1550.0], [67.1, 1550.0], [67.2, 1550.0], [67.3, 1550.0], [67.4, 1550.0], [67.5, 1550.0], [67.6, 1550.0], [67.7, 1550.0], [67.8, 1550.0], [67.9, 1550.0], [68.0, 1560.0], [68.1, 1560.0], [68.2, 1560.0], [68.3, 1560.0], [68.4, 1560.0], [68.5, 1560.0], [68.6, 1560.0], [68.7, 1560.0], [68.8, 1560.0], [68.9, 1560.0], [69.0, 1565.0], [69.1, 1565.0], [69.2, 1565.0], [69.3, 1565.0], [69.4, 1565.0], [69.5, 1565.0], [69.6, 1565.0], [69.7, 1565.0], [69.8, 1565.0], [69.9, 1565.0], [70.0, 1598.0], [70.1, 1598.0], [70.2, 1598.0], [70.3, 1598.0], [70.4, 1598.0], [70.5, 1598.0], [70.6, 1598.0], [70.7, 1598.0], [70.8, 1598.0], [70.9, 1598.0], [71.0, 1619.0], [71.1, 1619.0], [71.2, 1619.0], [71.3, 1619.0], [71.4, 1619.0], [71.5, 1619.0], [71.6, 1619.0], [71.7, 1619.0], [71.8, 1619.0], [71.9, 1619.0], [72.0, 1690.0], [72.1, 1690.0], [72.2, 1690.0], [72.3, 1690.0], [72.4, 1690.0], [72.5, 1690.0], [72.6, 1690.0], [72.7, 1690.0], [72.8, 1690.0], [72.9, 1690.0], [73.0, 1732.0], [73.1, 1732.0], [73.2, 1732.0], [73.3, 1732.0], [73.4, 1732.0], [73.5, 1732.0], [73.6, 1732.0], [73.7, 1732.0], [73.8, 1732.0], [73.9, 1732.0], [74.0, 1786.0], [74.1, 1786.0], [74.2, 1786.0], [74.3, 1786.0], [74.4, 1786.0], [74.5, 1786.0], [74.6, 1786.0], [74.7, 1786.0], [74.8, 1786.0], [74.9, 1786.0], [75.0, 1834.0], [75.1, 1834.0], [75.2, 1834.0], [75.3, 1834.0], [75.4, 1834.0], [75.5, 1834.0], [75.6, 1834.0], [75.7, 1834.0], [75.8, 1834.0], [75.9, 1834.0], [76.0, 1859.0], [76.1, 1859.0], [76.2, 1859.0], [76.3, 1859.0], [76.4, 1859.0], [76.5, 1859.0], [76.6, 1859.0], [76.7, 1859.0], [76.8, 1859.0], [76.9, 1859.0], [77.0, 1963.0], [77.1, 1963.0], [77.2, 1963.0], [77.3, 1963.0], [77.4, 1963.0], [77.5, 1963.0], [77.6, 1963.0], [77.7, 1963.0], [77.8, 1963.0], [77.9, 1963.0], [78.0, 1966.0], [78.1, 1966.0], [78.2, 1966.0], [78.3, 1966.0], [78.4, 1966.0], [78.5, 1966.0], [78.6, 1966.0], [78.7, 1966.0], [78.8, 1966.0], [78.9, 1966.0], [79.0, 1995.0], [79.1, 1995.0], [79.2, 1995.0], [79.3, 1995.0], [79.4, 1995.0], [79.5, 1995.0], [79.6, 1995.0], [79.7, 1995.0], [79.8, 1995.0], [79.9, 1995.0], [80.0, 2040.0], [80.1, 2040.0], [80.2, 2040.0], [80.3, 2040.0], [80.4, 2040.0], [80.5, 2040.0], [80.6, 2040.0], [80.7, 2040.0], [80.8, 2040.0], [80.9, 2040.0], [81.0, 2051.0], [81.1, 2051.0], [81.2, 2051.0], [81.3, 2051.0], [81.4, 2051.0], [81.5, 2051.0], [81.6, 2051.0], [81.7, 2051.0], [81.8, 2051.0], [81.9, 2051.0], [82.0, 2433.0], [82.1, 2433.0], [82.2, 2433.0], [82.3, 2433.0], [82.4, 2433.0], [82.5, 2433.0], [82.6, 2433.0], [82.7, 2433.0], [82.8, 2433.0], [82.9, 2433.0], [83.0, 2542.0], [83.1, 2542.0], [83.2, 2542.0], [83.3, 2542.0], [83.4, 2542.0], [83.5, 2542.0], [83.6, 2542.0], [83.7, 2542.0], [83.8, 2542.0], [83.9, 2542.0], [84.0, 2702.0], [84.1, 2702.0], [84.2, 2702.0], [84.3, 2702.0], [84.4, 2702.0], [84.5, 2702.0], [84.6, 2702.0], [84.7, 2702.0], [84.8, 2702.0], [84.9, 2702.0], [85.0, 2866.0], [85.1, 2866.0], [85.2, 2866.0], [85.3, 2866.0], [85.4, 2866.0], [85.5, 2866.0], [85.6, 2866.0], [85.7, 2866.0], [85.8, 2866.0], [85.9, 2866.0], [86.0, 2960.0], [86.1, 2960.0], [86.2, 2960.0], [86.3, 2960.0], [86.4, 2960.0], [86.5, 2960.0], [86.6, 2960.0], [86.7, 2960.0], [86.8, 2960.0], [86.9, 2960.0], [87.0, 3001.0], [87.1, 3001.0], [87.2, 3001.0], [87.3, 3001.0], [87.4, 3001.0], [87.5, 3001.0], [87.6, 3001.0], [87.7, 3001.0], [87.8, 3001.0], [87.9, 3001.0], [88.0, 3115.0], [88.1, 3115.0], [88.2, 3115.0], [88.3, 3115.0], [88.4, 3115.0], [88.5, 3115.0], [88.6, 3115.0], [88.7, 3115.0], [88.8, 3115.0], [88.9, 3115.0], [89.0, 3155.0], [89.1, 3155.0], [89.2, 3155.0], [89.3, 3155.0], [89.4, 3155.0], [89.5, 3155.0], [89.6, 3155.0], [89.7, 3155.0], [89.8, 3155.0], [89.9, 3155.0], [90.0, 3299.0], [90.1, 3299.0], [90.2, 3299.0], [90.3, 3299.0], [90.4, 3299.0], [90.5, 3299.0], [90.6, 3299.0], [90.7, 3299.0], [90.8, 3299.0], [90.9, 3299.0], [91.0, 3313.0], [91.1, 3313.0], [91.2, 3313.0], [91.3, 3313.0], [91.4, 3313.0], [91.5, 3313.0], [91.6, 3313.0], [91.7, 3313.0], [91.8, 3313.0], [91.9, 3313.0], [92.0, 3321.0], [92.1, 3321.0], [92.2, 3321.0], [92.3, 3321.0], [92.4, 3321.0], [92.5, 3321.0], [92.6, 3321.0], [92.7, 3321.0], [92.8, 3321.0], [92.9, 3321.0], [93.0, 3537.0], [93.1, 3537.0], [93.2, 3537.0], [93.3, 3537.0], [93.4, 3537.0], [93.5, 3537.0], [93.6, 3537.0], [93.7, 3537.0], [93.8, 3537.0], [93.9, 3537.0], [94.0, 3744.0], [94.1, 3744.0], [94.2, 3744.0], [94.3, 3744.0], [94.4, 3744.0], [94.5, 3744.0], [94.6, 3744.0], [94.7, 3744.0], [94.8, 3744.0], [94.9, 3744.0], [95.0, 4729.0], [95.1, 4729.0], [95.2, 4729.0], [95.3, 4729.0], [95.4, 4729.0], [95.5, 4729.0], [95.6, 4729.0], [95.7, 4729.0], [95.8, 4729.0], [95.9, 4729.0], [96.0, 5014.0], [96.1, 5014.0], [96.2, 5014.0], [96.3, 5014.0], [96.4, 5014.0], [96.5, 5014.0], [96.6, 5014.0], [96.7, 5014.0], [96.8, 5014.0], [96.9, 5014.0], [97.0, 5107.0], [97.1, 5107.0], [97.2, 5107.0], [97.3, 5107.0], [97.4, 5107.0], [97.5, 5107.0], [97.6, 5107.0], [97.7, 5107.0], [97.8, 5107.0], [97.9, 5107.0], [98.0, 5427.0], [98.1, 5427.0], [98.2, 5427.0], [98.3, 5427.0], [98.4, 5427.0], [98.5, 5427.0], [98.6, 5427.0], [98.7, 5427.0], [98.8, 5427.0], [98.9, 5427.0], [99.0, 5845.0], [99.1, 5845.0], [99.2, 5845.0], [99.3, 5845.0], [99.4, 5845.0], [99.5, 5845.0], [99.6, 5845.0], [99.7, 5845.0], [99.8, 5845.0], [99.9, 5845.0]], "isOverall": false, "label": "blog", "isController": false}, {"data": [[0.0, 205.0], [0.1, 205.0], [0.2, 205.0], [0.3, 205.0], [0.4, 205.0], [0.5, 205.0], [0.6, 205.0], [0.7, 205.0], [0.8, 205.0], [0.9, 205.0], [1.0, 400.0], [1.1, 400.0], [1.2, 400.0], [1.3, 400.0], [1.4, 400.0], [1.5, 400.0], [1.6, 400.0], [1.7, 400.0], [1.8, 400.0], [1.9, 400.0], [2.0, 510.0], [2.1, 510.0], [2.2, 510.0], [2.3, 510.0], [2.4, 510.0], [2.5, 510.0], [2.6, 510.0], [2.7, 510.0], [2.8, 510.0], [2.9, 510.0], [3.0, 640.0], [3.1, 640.0], [3.2, 640.0], [3.3, 640.0], [3.4, 640.0], [3.5, 640.0], [3.6, 640.0], [3.7, 640.0], [3.8, 640.0], [3.9, 640.0], [4.0, 675.0], [4.1, 675.0], [4.2, 675.0], [4.3, 675.0], [4.4, 675.0], [4.5, 675.0], [4.6, 675.0], [4.7, 675.0], [4.8, 675.0], [4.9, 675.0], [5.0, 728.0], [5.1, 728.0], [5.2, 728.0], [5.3, 728.0], [5.4, 728.0], [5.5, 728.0], [5.6, 728.0], [5.7, 728.0], [5.8, 728.0], [5.9, 728.0], [6.0, 742.0], [6.1, 742.0], [6.2, 742.0], [6.3, 742.0], [6.4, 742.0], [6.5, 742.0], [6.6, 742.0], [6.7, 742.0], [6.8, 742.0], [6.9, 742.0], [7.0, 798.0], [7.1, 798.0], [7.2, 798.0], [7.3, 798.0], [7.4, 798.0], [7.5, 798.0], [7.6, 798.0], [7.7, 798.0], [7.8, 798.0], [7.9, 798.0], [8.0, 804.0], [8.1, 804.0], [8.2, 804.0], [8.3, 804.0], [8.4, 804.0], [8.5, 804.0], [8.6, 804.0], [8.7, 804.0], [8.8, 804.0], [8.9, 804.0], [9.0, 876.0], [9.1, 876.0], [9.2, 876.0], [9.3, 876.0], [9.4, 876.0], [9.5, 876.0], [9.6, 876.0], [9.7, 876.0], [9.8, 876.0], [9.9, 876.0], [10.0, 891.0], [10.1, 891.0], [10.2, 891.0], [10.3, 891.0], [10.4, 891.0], [10.5, 891.0], [10.6, 891.0], [10.7, 891.0], [10.8, 891.0], [10.9, 891.0], [11.0, 919.0], [11.1, 919.0], [11.2, 919.0], [11.3, 919.0], [11.4, 919.0], [11.5, 919.0], [11.6, 919.0], [11.7, 919.0], [11.8, 919.0], [11.9, 919.0], [12.0, 1073.0], [12.1, 1073.0], [12.2, 1073.0], [12.3, 1073.0], [12.4, 1073.0], [12.5, 1073.0], [12.6, 1073.0], [12.7, 1073.0], [12.8, 1073.0], [12.9, 1073.0], [13.0, 1089.0], [13.1, 1089.0], [13.2, 1089.0], [13.3, 1089.0], [13.4, 1089.0], [13.5, 1089.0], [13.6, 1089.0], [13.7, 1089.0], [13.8, 1089.0], [13.9, 1089.0], [14.0, 1138.0], [14.1, 1138.0], [14.2, 1138.0], [14.3, 1138.0], [14.4, 1138.0], [14.5, 1138.0], [14.6, 1138.0], [14.7, 1138.0], [14.8, 1138.0], [14.9, 1138.0], [15.0, 1148.0], [15.1, 1148.0], [15.2, 1148.0], [15.3, 1148.0], [15.4, 1148.0], [15.5, 1148.0], [15.6, 1148.0], [15.7, 1148.0], [15.8, 1148.0], [15.9, 1148.0], [16.0, 1154.0], [16.1, 1154.0], [16.2, 1154.0], [16.3, 1154.0], [16.4, 1154.0], [16.5, 1154.0], [16.6, 1154.0], [16.7, 1154.0], [16.8, 1154.0], [16.9, 1154.0], [17.0, 1179.0], [17.1, 1179.0], [17.2, 1179.0], [17.3, 1179.0], [17.4, 1179.0], [17.5, 1179.0], [17.6, 1179.0], [17.7, 1179.0], [17.8, 1179.0], [17.9, 1179.0], [18.0, 1180.0], [18.1, 1180.0], [18.2, 1180.0], [18.3, 1180.0], [18.4, 1180.0], [18.5, 1180.0], [18.6, 1180.0], [18.7, 1180.0], [18.8, 1180.0], [18.9, 1180.0], [19.0, 1197.0], [19.1, 1197.0], [19.2, 1197.0], [19.3, 1197.0], [19.4, 1197.0], [19.5, 1197.0], [19.6, 1197.0], [19.7, 1197.0], [19.8, 1197.0], [19.9, 1197.0], [20.0, 1246.0], [20.1, 1246.0], [20.2, 1246.0], [20.3, 1246.0], [20.4, 1246.0], [20.5, 1246.0], [20.6, 1246.0], [20.7, 1246.0], [20.8, 1246.0], [20.9, 1246.0], [21.0, 1249.0], [21.1, 1249.0], [21.2, 1249.0], [21.3, 1249.0], [21.4, 1249.0], [21.5, 1249.0], [21.6, 1249.0], [21.7, 1249.0], [21.8, 1249.0], [21.9, 1249.0], [22.0, 1266.0], [22.1, 1266.0], [22.2, 1266.0], [22.3, 1266.0], [22.4, 1266.0], [22.5, 1266.0], [22.6, 1266.0], [22.7, 1266.0], [22.8, 1266.0], [22.9, 1266.0], [23.0, 1269.0], [23.1, 1269.0], [23.2, 1269.0], [23.3, 1269.0], [23.4, 1269.0], [23.5, 1269.0], [23.6, 1269.0], [23.7, 1269.0], [23.8, 1269.0], [23.9, 1269.0], [24.0, 1296.0], [24.1, 1296.0], [24.2, 1296.0], [24.3, 1296.0], [24.4, 1296.0], [24.5, 1296.0], [24.6, 1296.0], [24.7, 1296.0], [24.8, 1296.0], [24.9, 1296.0], [25.0, 1329.0], [25.1, 1329.0], [25.2, 1329.0], [25.3, 1329.0], [25.4, 1329.0], [25.5, 1329.0], [25.6, 1329.0], [25.7, 1329.0], [25.8, 1329.0], [25.9, 1329.0], [26.0, 1363.0], [26.1, 1363.0], [26.2, 1363.0], [26.3, 1363.0], [26.4, 1363.0], [26.5, 1363.0], [26.6, 1363.0], [26.7, 1363.0], [26.8, 1363.0], [26.9, 1363.0], [27.0, 1366.0], [27.1, 1366.0], [27.2, 1366.0], [27.3, 1366.0], [27.4, 1366.0], [27.5, 1366.0], [27.6, 1366.0], [27.7, 1366.0], [27.8, 1366.0], [27.9, 1366.0], [28.0, 1382.0], [28.1, 1382.0], [28.2, 1382.0], [28.3, 1382.0], [28.4, 1382.0], [28.5, 1382.0], [28.6, 1382.0], [28.7, 1382.0], [28.8, 1382.0], [28.9, 1382.0], [29.0, 1382.0], [29.1, 1382.0], [29.2, 1382.0], [29.3, 1382.0], [29.4, 1382.0], [29.5, 1382.0], [29.6, 1382.0], [29.7, 1382.0], [29.8, 1382.0], [29.9, 1382.0], [30.0, 1390.0], [30.1, 1390.0], [30.2, 1390.0], [30.3, 1390.0], [30.4, 1390.0], [30.5, 1390.0], [30.6, 1390.0], [30.7, 1390.0], [30.8, 1390.0], [30.9, 1390.0], [31.0, 1400.0], [31.1, 1400.0], [31.2, 1400.0], [31.3, 1400.0], [31.4, 1400.0], [31.5, 1400.0], [31.6, 1400.0], [31.7, 1400.0], [31.8, 1400.0], [31.9, 1400.0], [32.0, 1409.0], [32.1, 1409.0], [32.2, 1409.0], [32.3, 1409.0], [32.4, 1409.0], [32.5, 1409.0], [32.6, 1409.0], [32.7, 1409.0], [32.8, 1409.0], [32.9, 1409.0], [33.0, 1419.0], [33.1, 1419.0], [33.2, 1419.0], [33.3, 1419.0], [33.4, 1419.0], [33.5, 1419.0], [33.6, 1419.0], [33.7, 1419.0], [33.8, 1419.0], [33.9, 1419.0], [34.0, 1439.0], [34.1, 1439.0], [34.2, 1439.0], [34.3, 1439.0], [34.4, 1439.0], [34.5, 1439.0], [34.6, 1439.0], [34.7, 1439.0], [34.8, 1439.0], [34.9, 1439.0], [35.0, 1486.0], [35.1, 1486.0], [35.2, 1486.0], [35.3, 1486.0], [35.4, 1486.0], [35.5, 1486.0], [35.6, 1486.0], [35.7, 1486.0], [35.8, 1486.0], [35.9, 1486.0], [36.0, 1494.0], [36.1, 1494.0], [36.2, 1494.0], [36.3, 1494.0], [36.4, 1494.0], [36.5, 1494.0], [36.6, 1494.0], [36.7, 1494.0], [36.8, 1494.0], [36.9, 1494.0], [37.0, 1539.0], [37.1, 1539.0], [37.2, 1539.0], [37.3, 1539.0], [37.4, 1539.0], [37.5, 1539.0], [37.6, 1539.0], [37.7, 1539.0], [37.8, 1539.0], [37.9, 1539.0], [38.0, 1561.0], [38.1, 1561.0], [38.2, 1561.0], [38.3, 1561.0], [38.4, 1561.0], [38.5, 1561.0], [38.6, 1561.0], [38.7, 1561.0], [38.8, 1561.0], [38.9, 1561.0], [39.0, 1565.0], [39.1, 1565.0], [39.2, 1565.0], [39.3, 1565.0], [39.4, 1565.0], [39.5, 1565.0], [39.6, 1565.0], [39.7, 1565.0], [39.8, 1565.0], [39.9, 1565.0], [40.0, 1599.0], [40.1, 1599.0], [40.2, 1599.0], [40.3, 1599.0], [40.4, 1599.0], [40.5, 1599.0], [40.6, 1599.0], [40.7, 1599.0], [40.8, 1599.0], [40.9, 1599.0], [41.0, 1617.0], [41.1, 1617.0], [41.2, 1617.0], [41.3, 1617.0], [41.4, 1617.0], [41.5, 1617.0], [41.6, 1617.0], [41.7, 1617.0], [41.8, 1617.0], [41.9, 1617.0], [42.0, 1642.0], [42.1, 1642.0], [42.2, 1642.0], [42.3, 1642.0], [42.4, 1642.0], [42.5, 1642.0], [42.6, 1642.0], [42.7, 1642.0], [42.8, 1642.0], [42.9, 1642.0], [43.0, 1699.0], [43.1, 1699.0], [43.2, 1699.0], [43.3, 1699.0], [43.4, 1699.0], [43.5, 1699.0], [43.6, 1699.0], [43.7, 1699.0], [43.8, 1699.0], [43.9, 1699.0], [44.0, 1715.0], [44.1, 1715.0], [44.2, 1715.0], [44.3, 1715.0], [44.4, 1715.0], [44.5, 1715.0], [44.6, 1715.0], [44.7, 1715.0], [44.8, 1715.0], [44.9, 1715.0], [45.0, 1716.0], [45.1, 1716.0], [45.2, 1716.0], [45.3, 1716.0], [45.4, 1716.0], [45.5, 1716.0], [45.6, 1716.0], [45.7, 1716.0], [45.8, 1716.0], [45.9, 1716.0], [46.0, 1727.0], [46.1, 1727.0], [46.2, 1727.0], [46.3, 1727.0], [46.4, 1727.0], [46.5, 1727.0], [46.6, 1727.0], [46.7, 1727.0], [46.8, 1727.0], [46.9, 1727.0], [47.0, 1752.0], [47.1, 1752.0], [47.2, 1752.0], [47.3, 1752.0], [47.4, 1752.0], [47.5, 1752.0], [47.6, 1752.0], [47.7, 1752.0], [47.8, 1752.0], [47.9, 1752.0], [48.0, 1767.0], [48.1, 1767.0], [48.2, 1767.0], [48.3, 1767.0], [48.4, 1767.0], [48.5, 1767.0], [48.6, 1767.0], [48.7, 1767.0], [48.8, 1767.0], [48.9, 1767.0], [49.0, 1799.0], [49.1, 1799.0], [49.2, 1799.0], [49.3, 1799.0], [49.4, 1799.0], [49.5, 1799.0], [49.6, 1799.0], [49.7, 1799.0], [49.8, 1799.0], [49.9, 1799.0], [50.0, 1800.0], [50.1, 1800.0], [50.2, 1800.0], [50.3, 1800.0], [50.4, 1800.0], [50.5, 1800.0], [50.6, 1800.0], [50.7, 1800.0], [50.8, 1800.0], [50.9, 1800.0], [51.0, 1815.0], [51.1, 1815.0], [51.2, 1815.0], [51.3, 1815.0], [51.4, 1815.0], [51.5, 1815.0], [51.6, 1815.0], [51.7, 1815.0], [51.8, 1815.0], [51.9, 1815.0], [52.0, 1846.0], [52.1, 1846.0], [52.2, 1846.0], [52.3, 1846.0], [52.4, 1846.0], [52.5, 1846.0], [52.6, 1846.0], [52.7, 1846.0], [52.8, 1846.0], [52.9, 1846.0], [53.0, 1878.0], [53.1, 1878.0], [53.2, 1878.0], [53.3, 1878.0], [53.4, 1878.0], [53.5, 1878.0], [53.6, 1878.0], [53.7, 1878.0], [53.8, 1878.0], [53.9, 1878.0], [54.0, 1896.0], [54.1, 1896.0], [54.2, 1896.0], [54.3, 1896.0], [54.4, 1896.0], [54.5, 1896.0], [54.6, 1896.0], [54.7, 1896.0], [54.8, 1896.0], [54.9, 1896.0], [55.0, 1900.0], [55.1, 1900.0], [55.2, 1900.0], [55.3, 1900.0], [55.4, 1900.0], [55.5, 1900.0], [55.6, 1900.0], [55.7, 1900.0], [55.8, 1900.0], [55.9, 1900.0], [56.0, 1908.0], [56.1, 1908.0], [56.2, 1908.0], [56.3, 1908.0], [56.4, 1908.0], [56.5, 1908.0], [56.6, 1908.0], [56.7, 1908.0], [56.8, 1908.0], [56.9, 1908.0], [57.0, 1911.0], [57.1, 1911.0], [57.2, 1911.0], [57.3, 1911.0], [57.4, 1911.0], [57.5, 1911.0], [57.6, 1911.0], [57.7, 1911.0], [57.8, 1911.0], [57.9, 1911.0], [58.0, 1932.0], [58.1, 1932.0], [58.2, 1932.0], [58.3, 1932.0], [58.4, 1932.0], [58.5, 1932.0], [58.6, 1932.0], [58.7, 1932.0], [58.8, 1932.0], [58.9, 1932.0], [59.0, 2003.0], [59.1, 2003.0], [59.2, 2003.0], [59.3, 2003.0], [59.4, 2003.0], [59.5, 2003.0], [59.6, 2003.0], [59.7, 2003.0], [59.8, 2003.0], [59.9, 2003.0], [60.0, 2014.0], [60.1, 2014.0], [60.2, 2014.0], [60.3, 2014.0], [60.4, 2014.0], [60.5, 2014.0], [60.6, 2014.0], [60.7, 2014.0], [60.8, 2014.0], [60.9, 2014.0], [61.0, 2023.0], [61.1, 2023.0], [61.2, 2023.0], [61.3, 2023.0], [61.4, 2023.0], [61.5, 2023.0], [61.6, 2023.0], [61.7, 2023.0], [61.8, 2023.0], [61.9, 2023.0], [62.0, 2078.0], [62.1, 2078.0], [62.2, 2078.0], [62.3, 2078.0], [62.4, 2078.0], [62.5, 2078.0], [62.6, 2078.0], [62.7, 2078.0], [62.8, 2078.0], [62.9, 2078.0], [63.0, 2082.0], [63.1, 2082.0], [63.2, 2082.0], [63.3, 2082.0], [63.4, 2082.0], [63.5, 2082.0], [63.6, 2082.0], [63.7, 2082.0], [63.8, 2082.0], [63.9, 2082.0], [64.0, 2088.0], [64.1, 2088.0], [64.2, 2088.0], [64.3, 2088.0], [64.4, 2088.0], [64.5, 2088.0], [64.6, 2088.0], [64.7, 2088.0], [64.8, 2088.0], [64.9, 2088.0], [65.0, 2268.0], [65.1, 2268.0], [65.2, 2268.0], [65.3, 2268.0], [65.4, 2268.0], [65.5, 2268.0], [65.6, 2268.0], [65.7, 2268.0], [65.8, 2268.0], [65.9, 2268.0], [66.0, 2366.0], [66.1, 2366.0], [66.2, 2366.0], [66.3, 2366.0], [66.4, 2366.0], [66.5, 2366.0], [66.6, 2366.0], [66.7, 2366.0], [66.8, 2366.0], [66.9, 2366.0], [67.0, 2393.0], [67.1, 2393.0], [67.2, 2393.0], [67.3, 2393.0], [67.4, 2393.0], [67.5, 2393.0], [67.6, 2393.0], [67.7, 2393.0], [67.8, 2393.0], [67.9, 2393.0], [68.0, 2473.0], [68.1, 2473.0], [68.2, 2473.0], [68.3, 2473.0], [68.4, 2473.0], [68.5, 2473.0], [68.6, 2473.0], [68.7, 2473.0], [68.8, 2473.0], [68.9, 2473.0], [69.0, 2524.0], [69.1, 2524.0], [69.2, 2524.0], [69.3, 2524.0], [69.4, 2524.0], [69.5, 2524.0], [69.6, 2524.0], [69.7, 2524.0], [69.8, 2524.0], [69.9, 2524.0], [70.0, 2535.0], [70.1, 2535.0], [70.2, 2535.0], [70.3, 2535.0], [70.4, 2535.0], [70.5, 2535.0], [70.6, 2535.0], [70.7, 2535.0], [70.8, 2535.0], [70.9, 2535.0], [71.0, 2596.0], [71.1, 2596.0], [71.2, 2596.0], [71.3, 2596.0], [71.4, 2596.0], [71.5, 2596.0], [71.6, 2596.0], [71.7, 2596.0], [71.8, 2596.0], [71.9, 2596.0], [72.0, 2613.0], [72.1, 2613.0], [72.2, 2613.0], [72.3, 2613.0], [72.4, 2613.0], [72.5, 2613.0], [72.6, 2613.0], [72.7, 2613.0], [72.8, 2613.0], [72.9, 2613.0], [73.0, 2640.0], [73.1, 2640.0], [73.2, 2640.0], [73.3, 2640.0], [73.4, 2640.0], [73.5, 2640.0], [73.6, 2640.0], [73.7, 2640.0], [73.8, 2640.0], [73.9, 2640.0], [74.0, 2653.0], [74.1, 2653.0], [74.2, 2653.0], [74.3, 2653.0], [74.4, 2653.0], [74.5, 2653.0], [74.6, 2653.0], [74.7, 2653.0], [74.8, 2653.0], [74.9, 2653.0], [75.0, 2664.0], [75.1, 2664.0], [75.2, 2664.0], [75.3, 2664.0], [75.4, 2664.0], [75.5, 2664.0], [75.6, 2664.0], [75.7, 2664.0], [75.8, 2664.0], [75.9, 2664.0], [76.0, 2685.0], [76.1, 2685.0], [76.2, 2685.0], [76.3, 2685.0], [76.4, 2685.0], [76.5, 2685.0], [76.6, 2685.0], [76.7, 2685.0], [76.8, 2685.0], [76.9, 2685.0], [77.0, 2778.0], [77.1, 2778.0], [77.2, 2778.0], [77.3, 2778.0], [77.4, 2778.0], [77.5, 2778.0], [77.6, 2778.0], [77.7, 2778.0], [77.8, 2778.0], [77.9, 2778.0], [78.0, 2825.0], [78.1, 2825.0], [78.2, 2825.0], [78.3, 2825.0], [78.4, 2825.0], [78.5, 2825.0], [78.6, 2825.0], [78.7, 2825.0], [78.8, 2825.0], [78.9, 2825.0], [79.0, 2976.0], [79.1, 2976.0], [79.2, 2976.0], [79.3, 2976.0], [79.4, 2976.0], [79.5, 2976.0], [79.6, 2976.0], [79.7, 2976.0], [79.8, 2976.0], [79.9, 2976.0], [80.0, 3007.0], [80.1, 3007.0], [80.2, 3007.0], [80.3, 3007.0], [80.4, 3007.0], [80.5, 3007.0], [80.6, 3007.0], [80.7, 3007.0], [80.8, 3007.0], [80.9, 3007.0], [81.0, 3026.0], [81.1, 3026.0], [81.2, 3026.0], [81.3, 3026.0], [81.4, 3026.0], [81.5, 3026.0], [81.6, 3026.0], [81.7, 3026.0], [81.8, 3026.0], [81.9, 3026.0], [82.0, 3207.0], [82.1, 3207.0], [82.2, 3207.0], [82.3, 3207.0], [82.4, 3207.0], [82.5, 3207.0], [82.6, 3207.0], [82.7, 3207.0], [82.8, 3207.0], [82.9, 3207.0], [83.0, 3367.0], [83.1, 3367.0], [83.2, 3367.0], [83.3, 3367.0], [83.4, 3367.0], [83.5, 3367.0], [83.6, 3367.0], [83.7, 3367.0], [83.8, 3367.0], [83.9, 3367.0], [84.0, 4029.0], [84.1, 4029.0], [84.2, 4029.0], [84.3, 4029.0], [84.4, 4029.0], [84.5, 4029.0], [84.6, 4029.0], [84.7, 4029.0], [84.8, 4029.0], [84.9, 4029.0], [85.0, 4143.0], [85.1, 4143.0], [85.2, 4143.0], [85.3, 4143.0], [85.4, 4143.0], [85.5, 4143.0], [85.6, 4143.0], [85.7, 4143.0], [85.8, 4143.0], [85.9, 4143.0], [86.0, 4391.0], [86.1, 4391.0], [86.2, 4391.0], [86.3, 4391.0], [86.4, 4391.0], [86.5, 4391.0], [86.6, 4391.0], [86.7, 4391.0], [86.8, 4391.0], [86.9, 4391.0], [87.0, 4391.0], [87.1, 4391.0], [87.2, 4391.0], [87.3, 4391.0], [87.4, 4391.0], [87.5, 4391.0], [87.6, 4391.0], [87.7, 4391.0], [87.8, 4391.0], [87.9, 4391.0], [88.0, 4548.0], [88.1, 4548.0], [88.2, 4548.0], [88.3, 4548.0], [88.4, 4548.0], [88.5, 4548.0], [88.6, 4548.0], [88.7, 4548.0], [88.8, 4548.0], [88.9, 4548.0], [89.0, 4897.0], [89.1, 4897.0], [89.2, 4897.0], [89.3, 4897.0], [89.4, 4897.0], [89.5, 4897.0], [89.6, 4897.0], [89.7, 4897.0], [89.8, 4897.0], [89.9, 4897.0], [90.0, 4900.0], [90.1, 4900.0], [90.2, 4900.0], [90.3, 4900.0], [90.4, 4900.0], [90.5, 4900.0], [90.6, 4900.0], [90.7, 4900.0], [90.8, 4900.0], [90.9, 4900.0], [91.0, 5052.0], [91.1, 5052.0], [91.2, 5052.0], [91.3, 5052.0], [91.4, 5052.0], [91.5, 5052.0], [91.6, 5052.0], [91.7, 5052.0], [91.8, 5052.0], [91.9, 5052.0], [92.0, 5469.0], [92.1, 5469.0], [92.2, 5469.0], [92.3, 5469.0], [92.4, 5469.0], [92.5, 5469.0], [92.6, 5469.0], [92.7, 5469.0], [92.8, 5469.0], [92.9, 5469.0], [93.0, 5661.0], [93.1, 5661.0], [93.2, 5661.0], [93.3, 5661.0], [93.4, 5661.0], [93.5, 5661.0], [93.6, 5661.0], [93.7, 5661.0], [93.8, 5661.0], [93.9, 5661.0], [94.0, 5820.0], [94.1, 5820.0], [94.2, 5820.0], [94.3, 5820.0], [94.4, 5820.0], [94.5, 5820.0], [94.6, 5820.0], [94.7, 5820.0], [94.8, 5820.0], [94.9, 5820.0], [95.0, 5914.0], [95.1, 5914.0], [95.2, 5914.0], [95.3, 5914.0], [95.4, 5914.0], [95.5, 5914.0], [95.6, 5914.0], [95.7, 5914.0], [95.8, 5914.0], [95.9, 5914.0], [96.0, 7070.0], [96.1, 7070.0], [96.2, 7070.0], [96.3, 7070.0], [96.4, 7070.0], [96.5, 7070.0], [96.6, 7070.0], [96.7, 7070.0], [96.8, 7070.0], [96.9, 7070.0], [97.0, 7874.0], [97.1, 7874.0], [97.2, 7874.0], [97.3, 7874.0], [97.4, 7874.0], [97.5, 7874.0], [97.6, 7874.0], [97.7, 7874.0], [97.8, 7874.0], [97.9, 7874.0], [98.0, 8877.0], [98.1, 8877.0], [98.2, 8877.0], [98.3, 8877.0], [98.4, 8877.0], [98.5, 8877.0], [98.6, 8877.0], [98.7, 8877.0], [98.8, 8877.0], [98.9, 8877.0], [99.0, 10903.0], [99.1, 10903.0], [99.2, 10903.0], [99.3, 10903.0], [99.4, 10903.0], [99.5, 10903.0], [99.6, 10903.0], [99.7, 10903.0], [99.8, 10903.0], [99.9, 10903.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[0.0, 61.0], [0.1, 61.0], [0.2, 61.0], [0.3, 61.0], [0.4, 61.0], [0.5, 61.0], [0.6, 61.0], [0.7, 61.0], [0.8, 61.0], [0.9, 61.0], [1.0, 404.0], [1.1, 404.0], [1.2, 404.0], [1.3, 404.0], [1.4, 404.0], [1.5, 404.0], [1.6, 404.0], [1.7, 404.0], [1.8, 404.0], [1.9, 404.0], [2.0, 482.0], [2.1, 482.0], [2.2, 482.0], [2.3, 482.0], [2.4, 482.0], [2.5, 482.0], [2.6, 482.0], [2.7, 482.0], [2.8, 482.0], [2.9, 482.0], [3.0, 765.0], [3.1, 765.0], [3.2, 765.0], [3.3, 765.0], [3.4, 765.0], [3.5, 765.0], [3.6, 765.0], [3.7, 765.0], [3.8, 765.0], [3.9, 765.0], [4.0, 814.0], [4.1, 814.0], [4.2, 814.0], [4.3, 814.0], [4.4, 814.0], [4.5, 814.0], [4.6, 814.0], [4.7, 814.0], [4.8, 814.0], [4.9, 814.0], [5.0, 860.0], [5.1, 860.0], [5.2, 860.0], [5.3, 860.0], [5.4, 860.0], [5.5, 860.0], [5.6, 860.0], [5.7, 860.0], [5.8, 860.0], [5.9, 860.0], [6.0, 919.0], [6.1, 919.0], [6.2, 919.0], [6.3, 919.0], [6.4, 919.0], [6.5, 919.0], [6.6, 919.0], [6.7, 919.0], [6.8, 919.0], [6.9, 919.0], [7.0, 1025.0], [7.1, 1025.0], [7.2, 1025.0], [7.3, 1025.0], [7.4, 1025.0], [7.5, 1025.0], [7.6, 1025.0], [7.7, 1025.0], [7.8, 1025.0], [7.9, 1025.0], [8.0, 1049.0], [8.1, 1049.0], [8.2, 1049.0], [8.3, 1049.0], [8.4, 1049.0], [8.5, 1049.0], [8.6, 1049.0], [8.7, 1049.0], [8.8, 1049.0], [8.9, 1049.0], [9.0, 1057.0], [9.1, 1057.0], [9.2, 1057.0], [9.3, 1057.0], [9.4, 1057.0], [9.5, 1057.0], [9.6, 1057.0], [9.7, 1057.0], [9.8, 1057.0], [9.9, 1057.0], [10.0, 1061.0], [10.1, 1061.0], [10.2, 1061.0], [10.3, 1061.0], [10.4, 1061.0], [10.5, 1061.0], [10.6, 1061.0], [10.7, 1061.0], [10.8, 1061.0], [10.9, 1061.0], [11.0, 1090.0], [11.1, 1090.0], [11.2, 1090.0], [11.3, 1090.0], [11.4, 1090.0], [11.5, 1090.0], [11.6, 1090.0], [11.7, 1090.0], [11.8, 1090.0], [11.9, 1090.0], [12.0, 1105.0], [12.1, 1105.0], [12.2, 1105.0], [12.3, 1105.0], [12.4, 1105.0], [12.5, 1105.0], [12.6, 1105.0], [12.7, 1105.0], [12.8, 1105.0], [12.9, 1105.0], [13.0, 1110.0], [13.1, 1110.0], [13.2, 1110.0], [13.3, 1110.0], [13.4, 1110.0], [13.5, 1110.0], [13.6, 1110.0], [13.7, 1110.0], [13.8, 1110.0], [13.9, 1110.0], [14.0, 1137.0], [14.1, 1137.0], [14.2, 1137.0], [14.3, 1137.0], [14.4, 1137.0], [14.5, 1137.0], [14.6, 1137.0], [14.7, 1137.0], [14.8, 1137.0], [14.9, 1137.0], [15.0, 1156.0], [15.1, 1156.0], [15.2, 1156.0], [15.3, 1156.0], [15.4, 1156.0], [15.5, 1156.0], [15.6, 1156.0], [15.7, 1156.0], [15.8, 1156.0], [15.9, 1156.0], [16.0, 1157.0], [16.1, 1157.0], [16.2, 1157.0], [16.3, 1157.0], [16.4, 1157.0], [16.5, 1157.0], [16.6, 1157.0], [16.7, 1157.0], [16.8, 1157.0], [16.9, 1157.0], [17.0, 1157.0], [17.1, 1157.0], [17.2, 1157.0], [17.3, 1157.0], [17.4, 1157.0], [17.5, 1157.0], [17.6, 1157.0], [17.7, 1157.0], [17.8, 1157.0], [17.9, 1157.0], [18.0, 1163.0], [18.1, 1163.0], [18.2, 1163.0], [18.3, 1163.0], [18.4, 1163.0], [18.5, 1163.0], [18.6, 1163.0], [18.7, 1163.0], [18.8, 1163.0], [18.9, 1163.0], [19.0, 1169.0], [19.1, 1169.0], [19.2, 1169.0], [19.3, 1169.0], [19.4, 1169.0], [19.5, 1169.0], [19.6, 1169.0], [19.7, 1169.0], [19.8, 1169.0], [19.9, 1169.0], [20.0, 1188.0], [20.1, 1188.0], [20.2, 1188.0], [20.3, 1188.0], [20.4, 1188.0], [20.5, 1188.0], [20.6, 1188.0], [20.7, 1188.0], [20.8, 1188.0], [20.9, 1188.0], [21.0, 1198.0], [21.1, 1198.0], [21.2, 1198.0], [21.3, 1198.0], [21.4, 1198.0], [21.5, 1198.0], [21.6, 1198.0], [21.7, 1198.0], [21.8, 1198.0], [21.9, 1198.0], [22.0, 1201.0], [22.1, 1201.0], [22.2, 1201.0], [22.3, 1201.0], [22.4, 1201.0], [22.5, 1201.0], [22.6, 1201.0], [22.7, 1201.0], [22.8, 1201.0], [22.9, 1201.0], [23.0, 1202.0], [23.1, 1202.0], [23.2, 1202.0], [23.3, 1202.0], [23.4, 1202.0], [23.5, 1202.0], [23.6, 1202.0], [23.7, 1202.0], [23.8, 1202.0], [23.9, 1202.0], [24.0, 1254.0], [24.1, 1254.0], [24.2, 1254.0], [24.3, 1254.0], [24.4, 1254.0], [24.5, 1254.0], [24.6, 1254.0], [24.7, 1254.0], [24.8, 1254.0], [24.9, 1254.0], [25.0, 1256.0], [25.1, 1256.0], [25.2, 1256.0], [25.3, 1256.0], [25.4, 1256.0], [25.5, 1256.0], [25.6, 1256.0], [25.7, 1256.0], [25.8, 1256.0], [25.9, 1256.0], [26.0, 1294.0], [26.1, 1294.0], [26.2, 1294.0], [26.3, 1294.0], [26.4, 1294.0], [26.5, 1294.0], [26.6, 1294.0], [26.7, 1294.0], [26.8, 1294.0], [26.9, 1294.0], [27.0, 1346.0], [27.1, 1346.0], [27.2, 1346.0], [27.3, 1346.0], [27.4, 1346.0], [27.5, 1346.0], [27.6, 1346.0], [27.7, 1346.0], [27.8, 1346.0], [27.9, 1346.0], [28.0, 1377.0], [28.1, 1377.0], [28.2, 1377.0], [28.3, 1377.0], [28.4, 1377.0], [28.5, 1377.0], [28.6, 1377.0], [28.7, 1377.0], [28.8, 1377.0], [28.9, 1377.0], [29.0, 1384.0], [29.1, 1384.0], [29.2, 1384.0], [29.3, 1384.0], [29.4, 1384.0], [29.5, 1384.0], [29.6, 1384.0], [29.7, 1384.0], [29.8, 1384.0], [29.9, 1384.0], [30.0, 1390.0], [30.1, 1390.0], [30.2, 1390.0], [30.3, 1390.0], [30.4, 1390.0], [30.5, 1390.0], [30.6, 1390.0], [30.7, 1390.0], [30.8, 1390.0], [30.9, 1390.0], [31.0, 1425.0], [31.1, 1425.0], [31.2, 1425.0], [31.3, 1425.0], [31.4, 1425.0], [31.5, 1425.0], [31.6, 1425.0], [31.7, 1425.0], [31.8, 1425.0], [31.9, 1425.0], [32.0, 1443.0], [32.1, 1443.0], [32.2, 1443.0], [32.3, 1443.0], [32.4, 1443.0], [32.5, 1443.0], [32.6, 1443.0], [32.7, 1443.0], [32.8, 1443.0], [32.9, 1443.0], [33.0, 1489.0], [33.1, 1489.0], [33.2, 1489.0], [33.3, 1489.0], [33.4, 1489.0], [33.5, 1489.0], [33.6, 1489.0], [33.7, 1489.0], [33.8, 1489.0], [33.9, 1489.0], [34.0, 1509.0], [34.1, 1509.0], [34.2, 1509.0], [34.3, 1509.0], [34.4, 1509.0], [34.5, 1509.0], [34.6, 1509.0], [34.7, 1509.0], [34.8, 1509.0], [34.9, 1509.0], [35.0, 1541.0], [35.1, 1541.0], [35.2, 1541.0], [35.3, 1541.0], [35.4, 1541.0], [35.5, 1541.0], [35.6, 1541.0], [35.7, 1541.0], [35.8, 1541.0], [35.9, 1541.0], [36.0, 1546.0], [36.1, 1546.0], [36.2, 1546.0], [36.3, 1546.0], [36.4, 1546.0], [36.5, 1546.0], [36.6, 1546.0], [36.7, 1546.0], [36.8, 1546.0], [36.9, 1546.0], [37.0, 1561.0], [37.1, 1561.0], [37.2, 1561.0], [37.3, 1561.0], [37.4, 1561.0], [37.5, 1561.0], [37.6, 1561.0], [37.7, 1561.0], [37.8, 1561.0], [37.9, 1561.0], [38.0, 1580.0], [38.1, 1580.0], [38.2, 1580.0], [38.3, 1580.0], [38.4, 1580.0], [38.5, 1580.0], [38.6, 1580.0], [38.7, 1580.0], [38.8, 1580.0], [38.9, 1580.0], [39.0, 1599.0], [39.1, 1599.0], [39.2, 1599.0], [39.3, 1599.0], [39.4, 1599.0], [39.5, 1599.0], [39.6, 1599.0], [39.7, 1599.0], [39.8, 1599.0], [39.9, 1599.0], [40.0, 1618.0], [40.1, 1618.0], [40.2, 1618.0], [40.3, 1618.0], [40.4, 1618.0], [40.5, 1618.0], [40.6, 1618.0], [40.7, 1618.0], [40.8, 1618.0], [40.9, 1618.0], [41.0, 1628.0], [41.1, 1628.0], [41.2, 1628.0], [41.3, 1628.0], [41.4, 1628.0], [41.5, 1628.0], [41.6, 1628.0], [41.7, 1628.0], [41.8, 1628.0], [41.9, 1628.0], [42.0, 1678.0], [42.1, 1678.0], [42.2, 1678.0], [42.3, 1678.0], [42.4, 1678.0], [42.5, 1678.0], [42.6, 1678.0], [42.7, 1678.0], [42.8, 1678.0], [42.9, 1678.0], [43.0, 1687.0], [43.1, 1687.0], [43.2, 1687.0], [43.3, 1687.0], [43.4, 1687.0], [43.5, 1687.0], [43.6, 1687.0], [43.7, 1687.0], [43.8, 1687.0], [43.9, 1687.0], [44.0, 1715.0], [44.1, 1715.0], [44.2, 1715.0], [44.3, 1715.0], [44.4, 1715.0], [44.5, 1715.0], [44.6, 1715.0], [44.7, 1715.0], [44.8, 1715.0], [44.9, 1715.0], [45.0, 1716.0], [45.1, 1716.0], [45.2, 1716.0], [45.3, 1716.0], [45.4, 1716.0], [45.5, 1716.0], [45.6, 1716.0], [45.7, 1716.0], [45.8, 1716.0], [45.9, 1716.0], [46.0, 1769.0], [46.1, 1769.0], [46.2, 1769.0], [46.3, 1769.0], [46.4, 1769.0], [46.5, 1769.0], [46.6, 1769.0], [46.7, 1769.0], [46.8, 1769.0], [46.9, 1769.0], [47.0, 1811.0], [47.1, 1811.0], [47.2, 1811.0], [47.3, 1811.0], [47.4, 1811.0], [47.5, 1811.0], [47.6, 1811.0], [47.7, 1811.0], [47.8, 1811.0], [47.9, 1811.0], [48.0, 1815.0], [48.1, 1815.0], [48.2, 1815.0], [48.3, 1815.0], [48.4, 1815.0], [48.5, 1815.0], [48.6, 1815.0], [48.7, 1815.0], [48.8, 1815.0], [48.9, 1815.0], [49.0, 1820.0], [49.1, 1820.0], [49.2, 1820.0], [49.3, 1820.0], [49.4, 1820.0], [49.5, 1820.0], [49.6, 1820.0], [49.7, 1820.0], [49.8, 1820.0], [49.9, 1820.0], [50.0, 1834.0], [50.1, 1834.0], [50.2, 1834.0], [50.3, 1834.0], [50.4, 1834.0], [50.5, 1834.0], [50.6, 1834.0], [50.7, 1834.0], [50.8, 1834.0], [50.9, 1834.0], [51.0, 1873.0], [51.1, 1873.0], [51.2, 1873.0], [51.3, 1873.0], [51.4, 1873.0], [51.5, 1873.0], [51.6, 1873.0], [51.7, 1873.0], [51.8, 1873.0], [51.9, 1873.0], [52.0, 1880.0], [52.1, 1880.0], [52.2, 1880.0], [52.3, 1880.0], [52.4, 1880.0], [52.5, 1880.0], [52.6, 1880.0], [52.7, 1880.0], [52.8, 1880.0], [52.9, 1880.0], [53.0, 1936.0], [53.1, 1936.0], [53.2, 1936.0], [53.3, 1936.0], [53.4, 1936.0], [53.5, 1936.0], [53.6, 1936.0], [53.7, 1936.0], [53.8, 1936.0], [53.9, 1936.0], [54.0, 1963.0], [54.1, 1963.0], [54.2, 1963.0], [54.3, 1963.0], [54.4, 1963.0], [54.5, 1963.0], [54.6, 1963.0], [54.7, 1963.0], [54.8, 1963.0], [54.9, 1963.0], [55.0, 2002.0], [55.1, 2002.0], [55.2, 2002.0], [55.3, 2002.0], [55.4, 2002.0], [55.5, 2002.0], [55.6, 2002.0], [55.7, 2002.0], [55.8, 2002.0], [55.9, 2002.0], [56.0, 2015.0], [56.1, 2015.0], [56.2, 2015.0], [56.3, 2015.0], [56.4, 2015.0], [56.5, 2015.0], [56.6, 2015.0], [56.7, 2015.0], [56.8, 2015.0], [56.9, 2015.0], [57.0, 2019.0], [57.1, 2019.0], [57.2, 2019.0], [57.3, 2019.0], [57.4, 2019.0], [57.5, 2019.0], [57.6, 2019.0], [57.7, 2019.0], [57.8, 2019.0], [57.9, 2019.0], [58.0, 2025.0], [58.1, 2025.0], [58.2, 2025.0], [58.3, 2025.0], [58.4, 2025.0], [58.5, 2025.0], [58.6, 2025.0], [58.7, 2025.0], [58.8, 2025.0], [58.9, 2025.0], [59.0, 2052.0], [59.1, 2052.0], [59.2, 2052.0], [59.3, 2052.0], [59.4, 2052.0], [59.5, 2052.0], [59.6, 2052.0], [59.7, 2052.0], [59.8, 2052.0], [59.9, 2052.0], [60.0, 2099.0], [60.1, 2099.0], [60.2, 2099.0], [60.3, 2099.0], [60.4, 2099.0], [60.5, 2099.0], [60.6, 2099.0], [60.7, 2099.0], [60.8, 2099.0], [60.9, 2099.0], [61.0, 2143.0], [61.1, 2143.0], [61.2, 2143.0], [61.3, 2143.0], [61.4, 2143.0], [61.5, 2143.0], [61.6, 2143.0], [61.7, 2143.0], [61.8, 2143.0], [61.9, 2143.0], [62.0, 2153.0], [62.1, 2153.0], [62.2, 2153.0], [62.3, 2153.0], [62.4, 2153.0], [62.5, 2153.0], [62.6, 2153.0], [62.7, 2153.0], [62.8, 2153.0], [62.9, 2153.0], [63.0, 2215.0], [63.1, 2215.0], [63.2, 2215.0], [63.3, 2215.0], [63.4, 2215.0], [63.5, 2215.0], [63.6, 2215.0], [63.7, 2215.0], [63.8, 2215.0], [63.9, 2215.0], [64.0, 2238.0], [64.1, 2238.0], [64.2, 2238.0], [64.3, 2238.0], [64.4, 2238.0], [64.5, 2238.0], [64.6, 2238.0], [64.7, 2238.0], [64.8, 2238.0], [64.9, 2238.0], [65.0, 2290.0], [65.1, 2290.0], [65.2, 2290.0], [65.3, 2290.0], [65.4, 2290.0], [65.5, 2290.0], [65.6, 2290.0], [65.7, 2290.0], [65.8, 2290.0], [65.9, 2290.0], [66.0, 2327.0], [66.1, 2327.0], [66.2, 2327.0], [66.3, 2327.0], [66.4, 2327.0], [66.5, 2327.0], [66.6, 2327.0], [66.7, 2327.0], [66.8, 2327.0], [66.9, 2327.0], [67.0, 2335.0], [67.1, 2335.0], [67.2, 2335.0], [67.3, 2335.0], [67.4, 2335.0], [67.5, 2335.0], [67.6, 2335.0], [67.7, 2335.0], [67.8, 2335.0], [67.9, 2335.0], [68.0, 2395.0], [68.1, 2395.0], [68.2, 2395.0], [68.3, 2395.0], [68.4, 2395.0], [68.5, 2395.0], [68.6, 2395.0], [68.7, 2395.0], [68.8, 2395.0], [68.9, 2395.0], [69.0, 2533.0], [69.1, 2533.0], [69.2, 2533.0], [69.3, 2533.0], [69.4, 2533.0], [69.5, 2533.0], [69.6, 2533.0], [69.7, 2533.0], [69.8, 2533.0], [69.9, 2533.0], [70.0, 2567.0], [70.1, 2567.0], [70.2, 2567.0], [70.3, 2567.0], [70.4, 2567.0], [70.5, 2567.0], [70.6, 2567.0], [70.7, 2567.0], [70.8, 2567.0], [70.9, 2567.0], [71.0, 2624.0], [71.1, 2624.0], [71.2, 2624.0], [71.3, 2624.0], [71.4, 2624.0], [71.5, 2624.0], [71.6, 2624.0], [71.7, 2624.0], [71.8, 2624.0], [71.9, 2624.0], [72.0, 2655.0], [72.1, 2655.0], [72.2, 2655.0], [72.3, 2655.0], [72.4, 2655.0], [72.5, 2655.0], [72.6, 2655.0], [72.7, 2655.0], [72.8, 2655.0], [72.9, 2655.0], [73.0, 2802.0], [73.1, 2802.0], [73.2, 2802.0], [73.3, 2802.0], [73.4, 2802.0], [73.5, 2802.0], [73.6, 2802.0], [73.7, 2802.0], [73.8, 2802.0], [73.9, 2802.0], [74.0, 2883.0], [74.1, 2883.0], [74.2, 2883.0], [74.3, 2883.0], [74.4, 2883.0], [74.5, 2883.0], [74.6, 2883.0], [74.7, 2883.0], [74.8, 2883.0], [74.9, 2883.0], [75.0, 2910.0], [75.1, 2910.0], [75.2, 2910.0], [75.3, 2910.0], [75.4, 2910.0], [75.5, 2910.0], [75.6, 2910.0], [75.7, 2910.0], [75.8, 2910.0], [75.9, 2910.0], [76.0, 2970.0], [76.1, 2970.0], [76.2, 2970.0], [76.3, 2970.0], [76.4, 2970.0], [76.5, 2970.0], [76.6, 2970.0], [76.7, 2970.0], [76.8, 2970.0], [76.9, 2970.0], [77.0, 3059.0], [77.1, 3059.0], [77.2, 3059.0], [77.3, 3059.0], [77.4, 3059.0], [77.5, 3059.0], [77.6, 3059.0], [77.7, 3059.0], [77.8, 3059.0], [77.9, 3059.0], [78.0, 3203.0], [78.1, 3203.0], [78.2, 3203.0], [78.3, 3203.0], [78.4, 3203.0], [78.5, 3203.0], [78.6, 3203.0], [78.7, 3203.0], [78.8, 3203.0], [78.9, 3203.0], [79.0, 3251.0], [79.1, 3251.0], [79.2, 3251.0], [79.3, 3251.0], [79.4, 3251.0], [79.5, 3251.0], [79.6, 3251.0], [79.7, 3251.0], [79.8, 3251.0], [79.9, 3251.0], [80.0, 3353.0], [80.1, 3353.0], [80.2, 3353.0], [80.3, 3353.0], [80.4, 3353.0], [80.5, 3353.0], [80.6, 3353.0], [80.7, 3353.0], [80.8, 3353.0], [80.9, 3353.0], [81.0, 3415.0], [81.1, 3415.0], [81.2, 3415.0], [81.3, 3415.0], [81.4, 3415.0], [81.5, 3415.0], [81.6, 3415.0], [81.7, 3415.0], [81.8, 3415.0], [81.9, 3415.0], [82.0, 3565.0], [82.1, 3565.0], [82.2, 3565.0], [82.3, 3565.0], [82.4, 3565.0], [82.5, 3565.0], [82.6, 3565.0], [82.7, 3565.0], [82.8, 3565.0], [82.9, 3565.0], [83.0, 3608.0], [83.1, 3608.0], [83.2, 3608.0], [83.3, 3608.0], [83.4, 3608.0], [83.5, 3608.0], [83.6, 3608.0], [83.7, 3608.0], [83.8, 3608.0], [83.9, 3608.0], [84.0, 4316.0], [84.1, 4316.0], [84.2, 4316.0], [84.3, 4316.0], [84.4, 4316.0], [84.5, 4316.0], [84.6, 4316.0], [84.7, 4316.0], [84.8, 4316.0], [84.9, 4316.0], [85.0, 4626.0], [85.1, 4626.0], [85.2, 4626.0], [85.3, 4626.0], [85.4, 4626.0], [85.5, 4626.0], [85.6, 4626.0], [85.7, 4626.0], [85.8, 4626.0], [85.9, 4626.0], [86.0, 4929.0], [86.1, 4929.0], [86.2, 4929.0], [86.3, 4929.0], [86.4, 4929.0], [86.5, 4929.0], [86.6, 4929.0], [86.7, 4929.0], [86.8, 4929.0], [86.9, 4929.0], [87.0, 5152.0], [87.1, 5152.0], [87.2, 5152.0], [87.3, 5152.0], [87.4, 5152.0], [87.5, 5152.0], [87.6, 5152.0], [87.7, 5152.0], [87.8, 5152.0], [87.9, 5152.0], [88.0, 5593.0], [88.1, 5593.0], [88.2, 5593.0], [88.3, 5593.0], [88.4, 5593.0], [88.5, 5593.0], [88.6, 5593.0], [88.7, 5593.0], [88.8, 5593.0], [88.9, 5593.0], [89.0, 6038.0], [89.1, 6038.0], [89.2, 6038.0], [89.3, 6038.0], [89.4, 6038.0], [89.5, 6038.0], [89.6, 6038.0], [89.7, 6038.0], [89.8, 6038.0], [89.9, 6038.0], [90.0, 7409.0], [90.1, 7409.0], [90.2, 7409.0], [90.3, 7409.0], [90.4, 7409.0], [90.5, 7409.0], [90.6, 7409.0], [90.7, 7409.0], [90.8, 7409.0], [90.9, 7409.0], [91.0, 7518.0], [91.1, 7518.0], [91.2, 7518.0], [91.3, 7518.0], [91.4, 7518.0], [91.5, 7518.0], [91.6, 7518.0], [91.7, 7518.0], [91.8, 7518.0], [91.9, 7518.0], [92.0, 8227.0], [92.1, 8227.0], [92.2, 8227.0], [92.3, 8227.0], [92.4, 8227.0], [92.5, 8227.0], [92.6, 8227.0], [92.7, 8227.0], [92.8, 8227.0], [92.9, 8227.0], [93.0, 8323.0], [93.1, 8323.0], [93.2, 8323.0], [93.3, 8323.0], [93.4, 8323.0], [93.5, 8323.0], [93.6, 8323.0], [93.7, 8323.0], [93.8, 8323.0], [93.9, 8323.0], [94.0, 8527.0], [94.1, 8527.0], [94.2, 8527.0], [94.3, 8527.0], [94.4, 8527.0], [94.5, 8527.0], [94.6, 8527.0], [94.7, 8527.0], [94.8, 8527.0], [94.9, 8527.0], [95.0, 9771.0], [95.1, 9771.0], [95.2, 9771.0], [95.3, 9771.0], [95.4, 9771.0], [95.5, 9771.0], [95.6, 9771.0], [95.7, 9771.0], [95.8, 9771.0], [95.9, 9771.0], [96.0, 13027.0], [96.1, 13027.0], [96.2, 13027.0], [96.3, 13027.0], [96.4, 13027.0], [96.5, 13027.0], [96.6, 13027.0], [96.7, 13027.0], [96.8, 13027.0], [96.9, 13027.0], [97.0, 17410.0], [97.1, 17410.0], [97.2, 17410.0], [97.3, 17410.0], [97.4, 17410.0], [97.5, 17410.0], [97.6, 17410.0], [97.7, 17410.0], [97.8, 17410.0], [97.9, 17410.0], [98.0, 19271.0], [98.1, 19271.0], [98.2, 19271.0], [98.3, 19271.0], [98.4, 19271.0], [98.5, 19271.0], [98.6, 19271.0], [98.7, 19271.0], [98.8, 19271.0], [98.9, 19271.0], [99.0, 53076.0], [99.1, 53076.0], [99.2, 53076.0], [99.3, 53076.0], [99.4, 53076.0], [99.5, 53076.0], [99.6, 53076.0], [99.7, 53076.0], [99.8, 53076.0], [99.9, 53076.0]], "isOverall": false, "label": "home", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 11.0, "series": [{"data": [[0.0, 1.0], [600.0, 3.0], [700.0, 10.0], [800.0, 9.0], [900.0, 11.0], [1000.0, 8.0], [1100.0, 2.0], [1200.0, 5.0], [1300.0, 3.0], [1400.0, 5.0], [1500.0, 8.0], [1600.0, 2.0], [1700.0, 2.0], [1800.0, 2.0], [1900.0, 3.0], [2000.0, 2.0], [2400.0, 1.0], [2500.0, 1.0], [2800.0, 1.0], [2700.0, 1.0], [2900.0, 1.0], [3000.0, 1.0], [3100.0, 2.0], [3300.0, 2.0], [3200.0, 1.0], [3500.0, 1.0], [3700.0, 1.0], [4700.0, 1.0], [5100.0, 1.0], [5000.0, 1.0], [5400.0, 1.0], [5800.0, 1.0], [400.0, 3.0], [500.0, 3.0]], "isOverall": false, "label": "blog", "isController": false}, {"data": [[8800.0, 1.0], [600.0, 2.0], [10900.0, 1.0], [700.0, 3.0], [800.0, 3.0], [900.0, 1.0], [1000.0, 2.0], [1100.0, 6.0], [1200.0, 5.0], [1300.0, 6.0], [1400.0, 6.0], [1500.0, 4.0], [1600.0, 3.0], [1700.0, 6.0], [1800.0, 5.0], [1900.0, 4.0], [2000.0, 6.0], [2300.0, 2.0], [2200.0, 1.0], [2400.0, 1.0], [2500.0, 3.0], [2600.0, 5.0], [2800.0, 1.0], [2700.0, 1.0], [2900.0, 1.0], [3000.0, 2.0], [3300.0, 1.0], [3200.0, 1.0], [200.0, 1.0], [4000.0, 1.0], [4100.0, 1.0], [4300.0, 2.0], [4500.0, 1.0], [4800.0, 1.0], [4900.0, 1.0], [5000.0, 1.0], [5400.0, 1.0], [5600.0, 1.0], [5800.0, 1.0], [5900.0, 1.0], [400.0, 1.0], [7000.0, 1.0], [7800.0, 1.0], [500.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[8300.0, 1.0], [8500.0, 1.0], [8200.0, 1.0], [0.0, 1.0], [9700.0, 1.0], [700.0, 1.0], [13000.0, 1.0], [800.0, 2.0], [900.0, 1.0], [1000.0, 5.0], [17400.0, 1.0], [1100.0, 10.0], [1200.0, 5.0], [19200.0, 1.0], [1300.0, 4.0], [1400.0, 3.0], [1500.0, 6.0], [1600.0, 4.0], [1700.0, 3.0], [1800.0, 6.0], [1900.0, 2.0], [2000.0, 6.0], [2100.0, 2.0], [2300.0, 3.0], [2200.0, 3.0], [2500.0, 2.0], [2600.0, 2.0], [2800.0, 2.0], [2900.0, 2.0], [3000.0, 1.0], [3200.0, 2.0], [3300.0, 1.0], [53000.0, 1.0], [3400.0, 1.0], [3500.0, 1.0], [3600.0, 1.0], [4300.0, 1.0], [4600.0, 1.0], [5100.0, 1.0], [4900.0, 1.0], [5500.0, 1.0], [6000.0, 1.0], [400.0, 2.0], [7400.0, 1.0], [7500.0, 1.0]], "isOverall": false, "label": "home", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 53000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 9.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 166.0, "series": [{"data": [[0.0, 9.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 125.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 166.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 12.720379146919436, "minX": 1.67094096E12, "maxY": 20.0, "series": [{"data": [[1.67094102E12, 12.720379146919436], [1.67094096E12, 20.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.67094102E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 457.0, "minX": 1.0, "maxY": 11070.999999999998, "series": [{"data": [[16.0, 554.0], [2.0, 901.0], [1.0, 457.0], [17.0, 1863.4615384615388], [18.0, 1884.0], [9.0, 1201.0], [20.0, 1781.6969696969697], [6.0, 680.5], [3.0, 700.5], [13.0, 1508.6], [7.0, 1786.0], [15.0, 3321.0]], "isOverall": false, "label": "blog", "isController": false}, {"data": [[14.979999999999999, 1580.5199999999998]], "isOverall": false, "label": "blog-Aggregated", "isController": false}, {"data": [[8.0, 2003.0], [2.0, 1454.0], [9.0, 1400.0], [10.0, 1846.0], [11.0, 3071.5], [12.0, 1815.0], [3.0, 675.0], [13.0, 2317.90909090909], [14.0, 1896.0], [15.0, 804.0], [16.0, 1539.0], [4.0, 742.0], [1.0, 739.2], [17.0, 3066.4615384615386], [18.0, 4184.666666666667], [19.0, 891.0], [20.0, 2755.1428571428573], [5.0, 575.0], [6.0, 1363.0], [7.0, 2014.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[14.279999999999998, 2369.3799999999983]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}, {"data": [[2.0, 860.0], [1.0, 11070.999999999998], [17.0, 4163.75], [18.0, 5266.571428571428], [9.0, 1452.5], [20.0, 2989.6944444444434], [5.0, 1820.0], [3.0, 482.0], [13.0, 2180.114285714285]], "isOverall": false, "label": "home", "isController": false}, {"data": [[15.379999999999994, 3321.8599999999988]], "isOverall": false, "label": "home-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 20.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 187.03333333333333, "minX": 1.67094096E12, "maxY": 335239.76666666666, "series": [{"data": [[1.67094102E12, 335239.76666666666], [1.67094096E12, 139392.46666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.67094102E12, 446.3], [1.67094096E12, 187.03333333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.67094102E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1533.1884057971015, "minX": 1.67094096E12, "maxY": 3521.6515151515155, "series": [{"data": [[1.67094102E12, 1533.1884057971015], [1.67094096E12, 1685.8709677419356]], "isOverall": false, "label": "blog", "isController": false}, {"data": [[1.67094102E12, 2251.9342105263154], [1.67094096E12, 2741.291666666667]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[1.67094102E12, 3521.6515151515155], [1.67094096E12, 2934.029411764705]], "isOverall": false, "label": "home", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.67094102E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 449.4927536231884, "minX": 1.67094096E12, "maxY": 1069.6764705882351, "series": [{"data": [[1.67094102E12, 449.4927536231884], [1.67094096E12, 572.967741935484]], "isOverall": false, "label": "blog", "isController": false}, {"data": [[1.67094102E12, 481.6315789473683], [1.67094096E12, 716.8333333333334]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[1.67094102E12, 1032.3030303030307], [1.67094096E12, 1069.6764705882351]], "isOverall": false, "label": "home", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.67094102E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.67094096E12, "maxY": 467.85294117647055, "series": [{"data": [[1.67094102E12, 0.0], [1.67094096E12, 0.0]], "isOverall": false, "label": "blog", "isController": false}, {"data": [[1.67094102E12, 1.236842105263158], [1.67094096E12, 0.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[1.67094102E12, 437.2575757575758], [1.67094096E12, 467.85294117647055]], "isOverall": false, "label": "home", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.67094102E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 61.0, "minX": 1.67094096E12, "maxY": 53076.0, "series": [{"data": [[1.67094102E12, 53076.0], [1.67094096E12, 13027.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.67094102E12, 4376.000000000001], [1.67094096E12, 5914.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.67094102E12, 19047.679999999993], [1.67094096E12, 13027.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.67094102E12, 5545.799999999996], [1.67094096E12, 8702.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.67094102E12, 61.0], [1.67094096E12, 729.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.67094102E12, 1687.0], [1.67094096E12, 1399.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.67094102E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 613.0, "minX": 1.0, "maxY": 2093.5, "series": [{"data": [[4.0, 1751.0], [8.0, 2093.5], [2.0, 613.0], [1.0, 901.0], [9.0, 1675.5], [5.0, 1428.0], [11.0, 1546.0], [6.0, 1517.5], [3.0, 978.0], [7.0, 1678.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 11.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 117.0, "minX": 1.0, "maxY": 625.0, "series": [{"data": [[4.0, 480.0], [8.0, 625.0], [2.0, 117.0], [1.0, 231.0], [9.0, 512.5], [5.0, 406.0], [11.0, 392.0], [6.0, 439.5], [3.0, 458.5], [7.0, 391.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 11.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.8166666666666667, "minX": 1.67094096E12, "maxY": 3.183333333333333, "series": [{"data": [[1.67094102E12, 3.183333333333333], [1.67094096E12, 1.8166666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.67094102E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.4833333333333334, "minX": 1.67094096E12, "maxY": 3.5166666666666666, "series": [{"data": [[1.67094102E12, 3.5166666666666666], [1.67094096E12, 1.4833333333333334]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.67094102E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.4, "minX": 1.67094096E12, "maxY": 1.2666666666666666, "series": [{"data": [[1.67094102E12, 1.2666666666666666], [1.67094096E12, 0.4]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.67094102E12, 1.1], [1.67094096E12, 0.5666666666666667]], "isOverall": false, "label": "home-success", "isController": false}, {"data": [[1.67094102E12, 1.15], [1.67094096E12, 0.5166666666666667]], "isOverall": false, "label": "blog-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.67094102E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.4833333333333334, "minX": 1.67094096E12, "maxY": 3.5166666666666666, "series": [{"data": [[1.67094102E12, 3.5166666666666666], [1.67094096E12, 1.4833333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.67094102E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

